// Cypher code to get the number of disputed transactions for every 
retailer 

MATCH (customer:Customer)-[transaction:SHOPPED_AT]->(retailer) 
WHERE transaction.status = "Disputed"
RETURN count(*)

// Cypher code to get the number of disputed transactions and the list of 
customer names for these disputed transactions for every retailer

MATCH (customer:Customer)-[transaction:SHOPPED_AT]->(retailer) 
WHERE transaction.status = "Disputed"
RETURN DISTINCT customer.name AS `Customer name`, retailer.name AS `Retailer name`, COUNT(transaction) AS `Disputed transaction count`

//  Cypher code to get the number of disputed transactions for every 
customer that has more than one disputed transaction 

MATCH (customer:Customer)-[transaction:SHOPPED_AT]->(retailer) 
WHERE transaction.status = 'Disputed'
WITH count(transaction) as `Transaction Count`, customer
WHERE `Transaction Count` > 1
RETURN customer.name AS `Customer Name`, `Transaction Count`


// Cypher code to get the list of stores on LaSalle street that have 
disputed transactions and the number of disputed transactions for every store; 
the store list must be sorted by store name in ascending order. 

MATCH (customer:Customer)-[transaction:SHOPPED_AT]->(retailer)
WHERE transaction.status = "Disputed" AND retailer.street =~ '.* LaSalle.*'
WITH retailer, count(*) AS number_of_disputed_transactions
WHERE number_of_disputed_transactions > 0
WITH retailer, number_of_disputed_transactions
ORDER BY retailer.name ASC 
RETURN retailer.name AS Retailer , number_of_disputed_transactions


// Cypher code to get the list of Employees who work in at least 2 stores 
where disputed transactions reported in these retailers 

MATCH (employee:Employee)-[job:WORKS_AT]->(retailer)
WITH COUNT(job) AS `job count`, employee
WHERE `job count` >=2 AND EXISTS {
MATCH (customer:Customer)-[transaction:SHOPPED_AT]->(retailer:Retailer) 
WHERE transaction.status = 'Disputed'
}
RETURN employee.name

//Or we can use this

MATCH (customer)-[transaction:SHOPPED_AT]->(retailer)
WHERE transaction.status = "Disputed" 

MATCH (employee1:Employee)-[:WORKS_AT]->(retailer1)
WHERE retailer.name = retailer1.name

MATCH (employee2:Employee)-[:WORKS_AT]->(retailer2)
WHERE  employee1.name = employee2.name AND retailer1.name <> retailer2.name

WITH employee1, retailer1, retailer2, customer, retailer
Return employee1.name AS `Employee`, retailer1.name AS `Retailer1`, collect(DISTINCT retailer2.name)   AS `Retailer2`, customer.name, retailer.name

// Cypher code to get the list of all Disputed transactions 


MATCH (customer:Customer)-[transaction:SHOPPED_AT]->(retailer) 
WHERE transaction.status = "Disputed" 
RETURN customer.name AS `Customer Name`, retailer.name AS `Retailer Name`, 
transaction.amount AS `Transaction Amount`, transaction.date AS `Transaction date` 
ORDER BY `Transaction date` DESC
